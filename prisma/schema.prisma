generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId                  Int                   @id @default(autoincrement()) @map("user_id")
  loginId                 String                @unique @db.VarChar(50)
  password                String                @db.VarChar(255)
  nickname                String                @unique @db.VarChar(30)
  profileImage            String?               @map("profile_image") @db.VarChar(500)
  popularity              Int                   @default(0)
  isVerified              Boolean               @default(false) @map("is_verified")
  refreshToken            String?               @map("refresh_token") @db.VarChar(500)
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @updatedAt @map("updated_at")
  bookmarks               Bookmark[]
  collections             Collection[]
  recommendationsReceived DailyRecommendation[] @relation("RecommendedUser")
  recommendationsGiven    DailyRecommendation[] @relation("Recommender")
  requestedFriendships    Friendship[]          @relation("RequestedBy")
  receivedFriendships     Friendship[]          @relation("RequestedTo")
  notificationsSent       Notification[]        @relation("FromUser")
  notificationsReceived   Notification[]        @relation("ToUser")
  roomMessages            RoomMessage[]
  roomParticipants        RoomParticipant[]
  hostedRooms             Room[]                @relation("HostUser")
  searchHistory           SearchHistory[]
  sharedCollections       SharedCollection[]
  userAgreements          UserAgreement?
  blockedByUsers          UserBlock[]           @relation("BlockedUser")
  blockedUsers            UserBlock[]           @relation("BlockerUser")
  userChatMessages        UserChatMessage[]
  userChats1              UserChat[]            @relation("User1")
  userChats2              UserChat[]            @relation("User2")
  userFeedbacks           UserFeedback[]

  @@map("users")
}

model UserAgreement {
  agreementId             Int     @id @default(autoincrement()) @map("agreement_id")
  userId                  Int     @unique @map("user_id")
  serviceTerms            Boolean @default(false) @map("service_terms")
  privacyCollection       Boolean @default(false) @map("privacy_collection")
  privacyPolicy           Boolean @default(false) @map("privacy_policy")
  marketingConsent        Boolean @default(false) @map("marketing_consent")
  eventPromotion          Boolean @default(false) @map("event_promotion")
  serviceNotification     Boolean @default(true) @map("service_notification")
  advertisingNotification Boolean @default(false) @map("advertising_notification")
  nightNotification       Boolean @default(false) @map("night_notification")
  user                    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_agreements")
}

model Friendship {
  friendshipId Int              @id @default(autoincrement()) @map("friendship_id")
  requestedBy  Int              @map("requested_by")
  requestedTo  Int              @map("requested_to")
  isAccepted   Boolean          @default(false) @map("is_accepted")
  status       FriendshipStatus @default(pending)
  createdAt    DateTime         @default(now()) @map("created_at")
  acceptedAt   DateTime?        @map("accepted_at")
  requester    User             @relation("RequestedBy", fields: [requestedBy], references: [userId], onDelete: Cascade)
  receiver     User             @relation("RequestedTo", fields: [requestedTo], references: [userId], onDelete: Cascade)

  @@unique([requestedBy, requestedTo], name: "unique_friendship")
  @@index([requestedBy, status], map: "idx_requested_by_status")
  @@index([requestedTo], map: "friendship_requested_to_fkey")
  @@map("friendship")
}

model UserBlock {
  blockId       Int               @id @default(autoincrement()) @map("block_id")
  blockerUserId Int               @map("blocker_user_id")
  blockedUserId Int               @map("blocked_user_id")
  blockedAt     DateTime          @default(now()) @map("blocked_at")
  isActive      Boolean           @default(true) @map("is_active")
  customReason  String?
  reportReasons UserBlockReason[]
  blocked       User              @relation("BlockedUser", fields: [blockedUserId], references: [userId], onDelete: Cascade)
  blocker       User              @relation("BlockerUser", fields: [blockerUserId], references: [userId], onDelete: Cascade)

  @@unique([blockerUserId, blockedUserId], name: "unique_block")
  @@index([blockedUserId], map: "user_blocks_blocked_user_id_fkey")
  @@map("user_blocks")
}

model UserBlockReason {
  userBlockReasonId Int          @id @default(autoincrement()) @map("user_block_reason_id")
  blockId           Int          @map("block_id")
  reason            reportReason
  block             UserBlock    @relation(fields: [blockId], references: [blockId], onDelete: Cascade)

  @@index([blockId], map: "user_block_reasons_block_id_fkey")
  @@map("user_block_reasons")
}

model Room {
  roomId              Int               @id @default(autoincrement()) @map("room_id")
  hostId              Int               @map("host_id")
  roomName            String            @map("room_name") @db.VarChar(100)
  isPublic            Boolean           @default(true) @map("is_public")
  isActive            Boolean           @default(true) @map("is_active")
  maxParticipants     Int               @default(6) @map("max_participants")
  currentParticipants Int               @default(1) @map("current_participants")
  popularity          Int               @default(0)
  autoArchive         Boolean           @default(true) @map("auto_archive")
  inviteAuth          InviteAuth        @default(all) @map("invite_auth")
  watched30s          Boolean           @default(false) @map("watched_30s")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  videoId             String            @map("video_id") @db.VarChar(20)
  startTime           Int               @default(0)
  startType           VideoStartType    @default(BEGINNING)
  bookmarks           Bookmark[]
  messages            RoomMessage[]
  participants        RoomParticipant[]
  host                User              @relation("HostUser", fields: [hostId], references: [userId], onDelete: Cascade)
  youtube_videos      YoutubeVideo      @relation(fields: [videoId], references: [videoId])

  @@index([hostId], map: "rooms_host_id_fkey")
  @@index([videoId], map: "rooms_video_id_fkey")
  @@map("rooms")
}

model RoomParticipant {
  participantId Int             @id @default(autoincrement()) @map("participant_id")
  roomId        Int             @map("room_id")
  userId        Int             @map("user_id")
  role          ParticipantRole @default(participant)
  joinedAt      DateTime        @default(now()) @map("joined_at")
  left_at       DateTime?
  lastJoinedAt  DateTime        @default(now()) @map("last_joined_at")
  totalStayTime Int             @default(0) @map("total_stay_time")
  room          Room            @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([roomId, userId], name: "unique_participant")
  @@index([userId], map: "room_participants_user_id_fkey")
  @@map("room_participants")
}

model RoomMessage {
  messageId Int         @id @default(autoincrement()) @map("message_id")
  roomId    Int         @map("room_id")
  userId    Int         @map("user_id")
  content   String      @db.Text
  type      MessageType @default(general)
  createdAt DateTime    @default(now()) @map("created_at")
  room      Room        @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([roomId], map: "room_messages_room_id_fkey")
  @@index([userId], map: "room_messages_user_id_fkey")
  @@map("room_messages")
}

model UserChat {
  chatId            Int                @id @default(autoincrement()) @map("chat_id")
  user1Id           Int                @map("user1_id")
  user2Id           Int                @map("user2_id")
  createdAt         DateTime           @default(now()) @map("created_at")
  sharedCollections SharedCollection[]
  messages          UserChatMessage[]
  user1             User               @relation("User1", fields: [user1Id], references: [userId], onDelete: Cascade)
  user2             User               @relation("User2", fields: [user2Id], references: [userId], onDelete: Cascade)

  @@unique([user1Id, user2Id], name: "unique_chat")
  @@index([user2Id], map: "user_chats_user2_id_fkey")
  @@map("user_chats")
}

model UserChatMessage {
  messageId Int             @id @default(autoincrement()) @map("message_id")
  chatId    Int             @map("chat_id")
  userId    Int             @map("user_id")
  content   String?         @db.Text
  type      ChatMessageType @default(general)
  createdAt DateTime        @default(now()) @map("created_at")
  chat      UserChat        @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([chatId, type], map: "idx_chat_type")
  @@index([userId], map: "user_chat_messages_user_id_fkey")
  @@map("user_chat_messages")
}

model Bookmark {
  bookmarkId         Int         @id @default(autoincrement()) @map("bookmark_id")
  userId             Int         @map("user_id")
  roomId             Int         @map("room_id")
  title              String?     @db.VarChar(50)
  content            String?     @db.Text
  originalBookmarkId Int?        @map("original_bookmark_id")
  createdAt          DateTime    @default(now()) @map("created_at")
  collectionId       Int?        @map("collection_id")
  timeline           Int?        @default(0)
  collection         Collection? @relation(fields: [collectionId], references: [collectionId])
  originalBookmark   Bookmark?   @relation("BookmarkCopy", fields: [originalBookmarkId], references: [bookmarkId])
  copiedBookmarks    Bookmark[]  @relation("BookmarkCopy")
  room               Room        @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  user               User        @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([originalBookmarkId], map: "bookmarks_original_bookmark_id_fkey")
  @@index([roomId], map: "bookmarks_room_id_fkey")
  @@index([userId], map: "bookmarks_user_id_fkey")
  @@index([collectionId], map: "bookmarks_collection_id_fkey")
  @@map("bookmarks")
}

model Collection {
  collectionId         Int                  @id @default(autoincrement()) @map("collection_id")
  userId               Int                  @map("user_id")
  title                String               @db.VarChar(100)
  description          String?              @db.VarChar(100)
  visibility           CollectionVisibility @default(public)
  bookmarkCount        Int                  @default(0) @map("bookmark_count")
  isLiked              Boolean              @default(false) @map("is_liked")
  originalCollectionId Int?                 @map("original_collection_id")
  createdAt            DateTime             @default(now()) @map("created_at")
  coverImage           String?              @map("cover_image") @db.VarChar(500)
  updatedAt            DateTime             @updatedAt @map("updated_at")
  order                Int?                 @default(1) @map("order")
  bookmarks            Bookmark[]
  originalCollection   Collection?          @relation("CollectionCopy", fields: [originalCollectionId], references: [collectionId])
  copiedCollections    Collection[]         @relation("CollectionCopy")
  user                 User                 @relation(fields: [userId], references: [userId], onDelete: Cascade)
  sharedCollections    SharedCollection[]

  @@index([originalCollectionId], map: "collections_original_collection_id_fkey")
  @@index([userId], map: "collections_user_id_fkey")
  @@map("collections")
}

model SharedCollection {
  shareId        Int        @id @default(autoincrement()) @map("share_id")
  sharedToUserId Int        @map("shared_to_user_id")
  collectionId   Int        @map("collection_id")
  sharedInChatId Int        @map("shared_in_chat_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  collection     Collection @relation(fields: [collectionId], references: [collectionId], onDelete: Cascade)
  sharedInChat   UserChat   @relation(fields: [sharedInChatId], references: [chatId], onDelete: Cascade)
  sharedToUser   User       @relation(fields: [sharedToUserId], references: [userId], onDelete: Cascade)

  @@index([collectionId], map: "shared_collections_collection_id_fkey")
  @@index([sharedInChatId], map: "shared_collections_shared_in_chat_id_fkey")
  @@index([sharedToUserId], map: "shared_collections_shared_to_user_id_fkey")
  @@map("shared_collections")
}

model Notification {
  notificationId Int                @id @default(autoincrement()) @map("notification_id")
  fromUserId     Int?               @map("from_user_id")
  toUserId       Int                @map("to_user_id")
  title          String?            @db.VarChar(150)
  type           NotificationType
  status         NotificationStatus @default(unread)
  createdAt      DateTime           @default(now()) @map("created_at")
  fromUser       User?              @relation("FromUser", fields: [fromUserId], references: [userId], onDelete: Cascade)
  toUser         User               @relation("ToUser", fields: [toUserId], references: [userId], onDelete: Cascade)

  @@index([toUserId, createdAt], map: "idx_to_user_created")
  @@index([fromUserId], map: "notifications_from_user_id_fkey")
  @@map("notifications")
}

model DailyRecommendation {
  recommendationId   Int      @id @default(autoincrement()) @map("recommendation_id")
  recommenderId      Int      @map("recommender_id")
  recommendedUserId  Int      @map("recommended_user_id")
  recommendationDate DateTime @map("recommendation_date") @db.Date
  createdAt          DateTime @default(now()) @map("created_at")
  recommendedUser    User     @relation("RecommendedUser", fields: [recommendedUserId], references: [userId], onDelete: Cascade)
  recommender        User     @relation("Recommender", fields: [recommenderId], references: [userId], onDelete: Cascade)

  @@unique([recommenderId, recommendedUserId, recommendationDate], name: "unique_daily_recommendation")
  @@index([recommendedUserId], map: "daily_recommendations_recommended_user_id_fkey")
  @@map("daily_recommendations")
}

model SearchHistory {
  historyId     Int      @id @default(autoincrement()) @map("history_id")
  userId        Int      @map("user_id")
  searchKeyword String   @map("search_keyword") @db.VarChar(100)
  searchedAt    DateTime @default(now()) @map("searched_at")
  user          User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, searchedAt], map: "idx_user_searched")
  @@map("search_history")
}

model YoutubeVideo {
  videoId     String    @id @map("video_id") @db.VarChar(20)
  title       String    @db.VarChar(200)
  description String?   @db.Text
  thumbnail   String?   @db.VarChar(500)
  channelIcon String?   @map("channel_icon") @db.VarChar(500)
  channelName String?   @map("channel_name") @db.VarChar(100)
  viewCount   Int       @default(0) @map("view_count")
  duration    String?   @db.VarChar(20)
  uploadedAt  DateTime? @map("uploaded_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  rooms       Room[]

  @@map("youtube_videos")
}

model UserFeedback {
  feedbackId Int      @id @default(autoincrement()) @map("feedback_id")
  userId     Int      @map("user_id")
  content    String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "user_feedbacks_user_id_fkey")
  @@map("user_feedbacks")
}

enum FriendshipStatus {
  pending
  accepted
  rejected

  @@map("friendship_status")
}

enum InviteAuth {
  all
  host

  @@map("invite_auth")
}

enum ParticipantRole {
  host
  participant

  @@map("participant_role")
}

enum MessageType {
  general
  system

  @@map("message_type")
}

enum ChatMessageType {
  general
  collectionShare
  roomInvite

  @@map("chat_message_type")
}

enum VideoStartType {
  BOOKMARK
  BEGINNING
}

enum CollectionVisibility {
  private
  friends
  public

  @@map("collection_visibility")
}

enum NotificationType {
  roomInvite
  collectionShare
  friendRequest
  popularityUp

  @@map("notification_type")
}

enum NotificationStatus {
  unread
  read

  @@map("notification_status")
}

enum reportReason {
  SPAM
  SPOIL
  PROFANITY
  HATE
  ETC
}
